#!/usr/bin/python
from __future__ import with_statement

import sys
import os
import glob
import shutil
import argparse
import ConfigParser
import time

import multi
import rescoring

class DockingConfig(object):

    def __init__(self, args):

        # check if config file exist
        if not os.path.exists(args.config_file):
            raise ValueError("Config file %s not found!"%(args.config_file))

        config = ConfigParser.SafeConfigParser()
        config.read(args.config_file)

        self.input_file_l = os.path.abspath(args.input_file_l[0])
        # check if ligand file exists
        if not os.path.exists(self.input_file_l):
            raise IOError("File %s not found!"%(self.input_file_l))

        self.input_file_r = os.path.abspath(args.input_file_r[0])
        # check if receptor file exists
        if not os.path.exists(self.input_file_r):
            raise IOError("File %s not found!"%(self.input_file_r))

        self.docking = multi.MultiProgramDocking(config)
        self.extract_only = args.extract_only
        self.rescoring = rescoring.Rescoring(config, args)

class Docking(object):

    def create_arg_parser(self):
        parser = argparse.ArgumentParser(description="Run Docking")

        parser.add_argument('-l',
            type=str,
            dest='input_file_l',
            required=True,
            nargs=1,
            help = 'Ligand coordinate file(s): .mol2')

        parser.add_argument('-r',
            type=str,
            dest='input_file_r',
            required=True,
            nargs=1,
            help = 'Receptor coordinate file(s): .pdb')

        parser.add_argument('-f',
            dest='config_file',
            required=True,
            help='config file containing docking parameters')

        parser.add_argument('-rescore_only',
            dest='rescore_only',
            action='store_true',
            default=False,
            help='Run rescoring only')

        parser.add_argument('-extract_only',
            dest='extract_only',
            action='store_true',
            default=False,
            help='Extract structures only (usually used for debugging)')

        return parser

    def finalize(self, config, config_d):
        """create directory containing all the poses found!"""

        resultdir = 'poses'
        shutil.rmtree(resultdir, ignore_errors=True)
        os.mkdir(resultdir)

        nposes = [1] # number of poses involved for each binding site
        sh = 1 # shift of model

        idx = 0
        summary = ''
        for kdx in range(len(config_d.site)):
            bs = config_d.site['site'+str(kdx+1)] # current binding site
            for name, program, options in config_d.instances:
                instdir = '%s'%name + '.'+bs[0]
                poses_idxs = []
                for filename in glob.glob(instdir+'/lig-*.mol2'):
                    poses_idxs.append(int((filename.split('.')[-2]).split('-')[-1]))
                poses_idxs = sorted(poses_idxs)
                for idx, pose_idx in enumerate(poses_idxs):
                    shutil.copyfile(instdir+'/lig-%s.mol2'%pose_idx, resultdir+'/lig-%s.mol2'%(idx+sh))
                summary += '%10s      %10s       %10s       %10s\n'%(program, idx+1, sh, kdx+1)
                sh += idx + 1
            nposes.append(sh)

        # write files containing the number of poses
        # generated by each software
        with open(resultdir+'/info.dat', 'w') as ff:
            ff.write('   '.join(map(str,nposes))+'\n')
            ff.write('#  program           nposes           firstidx             site\n')
            ff.write(summary)

        # copy receptor in folder
        shutil.copyfile(config.input_file_r, resultdir+'/rec.pdb')

    def run_docking(self, config):
        """Running docking simulations using each program specified..."""
        tcpu1 = time.time()

        config_d = config.docking
        # iterate over all the binding sites
        for kdx in range(len(config.docking.site)):
            for instance, program, options in config.docking.instances: # iterate over all the instances

                # get docking class
                DockingClass = getattr(sys.modules[program], program.capitalize())

                # create docking instance and run docking
                DockingInstance = DockingClass(instance, config.docking.site['site'+str(kdx+1)], options)
                DockingInstance.run_docking(config.input_file_r, config.input_file_l, minimize=config_d.minimize, \
cleanup=config_d.cleanup, extract_only=config.extract_only)

        self.finalize(config, config_d)
        tcpu2 = time.time()
        print "Docking procedure done. Total time needed: %i s" %(tcpu2-tcpu1)

    def run(self):

        parser = self.create_arg_parser()
        args = parser.parse_args()    

        print "Setting up parameters..."
        config = DockingConfig(args)

        # run docking
        if not config.rescoring.rescore_only:
            self.run_docking(config)

        # run rescoring
        if config.rescoring.is_rescoring:
            config.rescoring.run(config.input_file_r)
