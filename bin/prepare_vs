#!/usr/bin/python
import os
import sys
import shutil
import argparse
import ConfigParser
from glob import glob
import pandas as pd

parser = argparse.ArgumentParser(description="Build directories and config files for Virtual Screening (4th stage)")

parser.add_argument('-l',
    type=str,
    dest='input_files_l',
    nargs='+',
    metavar='FILE',
    default=['compounds.csv'],
    help='ligand file(s): .mol2, .csv (default: compounds.csv)')

parser.add_argument('-r',
    type=str,
    dest='input_files_r',
    nargs='+',
    metavar='FILE',
    default=['targets.csv'], 
    help = 'target file(s): .pdb, .csv (default: targets.csv)')

parser.add_argument('-f',
    type=str,
    dest='config_file',
    metavar='FILE',
    default='config.ini',
    help='config file: .ini')

parser.add_argument('-copy',
    action='store_true',
    dest='copy',
    default=False,
    help='Copy input files into folders (not recommended for large libraries)')

parser.add_argument('-s',
    dest='sitecsv',
    type=str,
    metavar='FILE',
    default='sites.csv',
    help='csvfile with binding sites: .csv (default: sites.csv)')

parser.add_argument('-w',
    dest='rundir',
    type=str,
    default='vs',
    metavar='DIRECTORY NAME',
    help='name of directory created for virtual screening')

def get_number_of_compounds(file_l):
    suffix, ext = os.path.splitext(file_l)
    if ext == '.mol2':
        # count number of lines with @<TRIPOS>ATOM
        nligs = subprocess.check_output('fgrep -c "@<TRIPOS>ATOM" %s'%file_l, shell=True)
    else:
        raise IOError("Extension not recognized for ligand file!")

    nligs = int(nligs)
    return nligs

args = parser.parse_args()

exts = list(set([os.path.splitext(ff)[1] for ff in args.input_files_r]))
if len(exts) != 1: # if more than one extension provided
    raise ValueError("All files specified with -r option must have the same extension!")

# check target input files
input_files_r = []
if exts[0] == '.pdb': # if input files are pdbfiles
    for file_r in args.input_files_r:
        if os.path.exists(file_r):
            input_files_r.append(os.path.abspath(file_r))
        else:
            raise ValueError("File %s not found!"%(file_r))

    ntargets = len(input_files_r)
    nid_digits = max(3, len(str(ntargets)))
    targetids = []

    for jdx, file_r in enumerate(input_files_r):
        targetids.append('target'+(nid_digits-len(str(jdx+1)))*'0' + str(jdx+1))
    is_csvfile_r = False
elif exts[0] == '.csv': # if input files is the csvfile
    if len(args.input_files_r) != 1:
        raise ValueError("More than 1 csvfile specified with -r option.")

    df_targets = pd.read_csv(args.input_files_r[0])
    input_files_r = [os.path.abspath(ff) for ff in list(df_targets['pdbfile'])]
    ntargets = len(input_files_r)
    targetids = list(df_targets['targetID'])
    is_csvfile_r = True
else:
    raise IOError("Extension of files used with -r option not recognized!")

exts_l = list(set([os.path.splitext(ff)[1] for ff in args.input_files_l]))
if len(exts_l) != 1: # if more than one extension provided
    raise ValueError("All files specified with -l option must have the same extension!")

# check ligand input files
input_files_l = []
if exts_l[0] == '.mol2': # if input files are .mol2
    for file_l in args.input_files_l:
        if os.path.exists(file_l):
            input_files_l.append(os.path.abspath(file_l))
        else:
            raise ValueError("File %s not found!"%(file_l))

    nligands = len(input_files_l)
    nid_digits = max(3, len(str(nligands)))
    ligandids = []

    for jdx, file_r in enumerate(input_files_l): 
        nligands_file_l = get_number_of_compounds(file_l)
        if nligands_file_l == 1:
            ligandids.append('lig'+(nid_digits-len(str(jdx+1)))*'0' + str(jdx+1))
        else:
            raise IOError("Every ligand file should contain at least 1 structure, or use the prepare_compounds routine!")
    is_csvfile_l = False
    use_isomer_folder = False

elif exts_l[0] == '.csv': # if input files is a csvfile
    if len(args.input_files_l) != 1:
        raise ValueError("More than 1 csvfile specified with -l option.")

    df_ligands = pd.read_csv(args.input_files_l[0])
    input_files_l = [os.path.abspath(ff) for ff in list(df_ligands['mol2file'])]
    nligands = len(input_files_l)
    ligandids = list(df_ligands['ligID'])
    isomers = list(df_ligands['isomer'])

    is_csvfile_l = True
    if all(x==1 for x in isomers):
        use_isomer_folder = False
    else:
        use_isomer_folder = True
else:
    raise IOError("Extension of files used with -r option not recognized!")

if not os.path.isfile(args.config_file):
    raise ValueError("Config file %s not found!"%args.config_file)

def update_config_file(new_config_file, config_file, label_r, csvfile):
    """Update binding site parameters in config file"""

    # create tmp config file name from original config file
    tmp_config_file = list(os.path.splitext(new_config_file))
    tmp_config_file.insert(1,'_tmp')
    tmp_config_file = ''.join(tmp_config_file)

    # remove section 'SITE' and option site in DOCKING section of config file if exists
    with open(tmp_config_file, 'w') as tmpf:
        with open(config_file, 'r') as newf:
            isdock = False
            sitesection = False
            docksection = False
            for line in newf:
                # check if still in section SITE*
                if line.startswith('[SITE'):
                    sitesection = True
                if sitesection and line.startswith('[') and not line.startswith('[SITE'): # new section has been reached
                    sitesection = False
                # check if still in section DOCKING
                if line.startswith('[DOCKING]'):
                    docksection = True
                    isdock = True
                if docksection and line.startswith('[') and not line.startswith('[DOCKING]'): # new section has been reached
                    docksection = False
                # check if option line in section DOCKING
                if line.strip().startswith('site') and docksection:
                    siteline = True
                else:
                    siteline = False
                if not sitesection and not siteline:
                    tmpf.write(line)
    shutil.move(tmp_config_file, new_config_file)

    df = pd.read_csv(csvfile)
    rows = df[df['target'] == label_r]

    nsites = len(rows)
    if nsites == 1:
         # add new sections 'SITE' and option site
        with open(tmp_config_file, 'w') as tmpf:
            with open(new_config_file, 'r') as newf:
                for line in newf:
                    tmpf.write(line)
                for row in rows.iterrows():
                    section = 'SITE'
                    center_conf = row[1]['center']
                    boxsize_conf = row[1]['size']

                    newsite_section = """
[%(section)s]
center = %(center_conf)s
boxsize = %(boxsize_conf)s"""% locals()
                    tmpf.write(newsite_section+'\n')
    elif nsites > 1:
        # add new sections 'SITE' and option site
        with open(tmp_config_file, 'w') as tmpf:
            with open(new_config_file, 'r') as newf:
                for line in newf:
                    tmpf.write(line)
                    if line.startswith('[DOCKING]'):
                        tmpf.write('site = ' + ', '.join(['site%s'%int(row[1]['site']) for row in rows.iterrows()])+'\n')
                for row in rows.iterrows():
                    section = 'SITE' + str(int(row[1]['site']))
                    center_conf = row[1]['center']
                    boxsize_conf = row[1]['size']

                    newsite_section = """
[%(section)s]
center = %(center_conf)s
boxsize = %(boxsize_conf)s"""% locals()
                    tmpf.write(newsite_section+'\n')
    shutil.move(tmp_config_file, new_config_file)

rundir = args.rundir

# always overwrite by default
shutil.rmtree(rundir, ignore_errors=True)
os.mkdir(rundir)

config_file_basename = os.path.basename(args.config_file)
for jdx, file_l in enumerate(input_files_l):
    ligid = ligandids[jdx]
    for idx, file_r in enumerate(input_files_r):
        recid = targetids[idx]
        if use_isomer_folder:
            workdir = rundir + '/' + ligid + '/' + recid + '/isomer' + str(isomers[jdx])
        else:
            workdir = rundir + '/' + ligid + '/' + recid

        os.makedirs(workdir)
        if args.copy:
            shutil.copyfile(file_l, workdir+'/ligand.mol2')
            shutil.copyfile(file_r, workdir+'/protein.pdb')
            script = """#!/bin/bash
#SBATCH --time=100-00:00
#SBATCH --partition=serial
#SBATCH --job-name="l%st%s"
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --nodes=1

set -e\n
rundock -f config.ini -l ligand.mol2 -r protein.pdb
"""%(ligid[3:],recid[6:])
        else:
            script = """#!/bin/bash
#SBATCH --time=100-00:00
#SBATCH --partition=serial
#SBATCH --job-name="l%st%s"
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --nodes=1

set -e\n
rundock -f config.ini -l %s -r %s
"""%(ligid[3:],recid[6:], file_l, file_r)
        with open(workdir+"/run.slurm", 'w') as slurmf:
            slurmf.write(script)
        # write config file
        new_config_file = workdir + '/' + config_file_basename
        update_config_file(new_config_file, args.config_file, recid, args.sitecsv)
