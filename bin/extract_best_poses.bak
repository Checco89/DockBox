#!/usr/bin/python
import os
import sys
import shutil
import argparse
import pandas as pd

parser = argparse.ArgumentParser(description="Run docking analysis")

parser.add_argument('-w',
    dest='dirs',
    nargs='+',
    default=['.'],
    help='Working directories used for analysis')

parser.add_argument('-s',
    required=True,
    dest='sf',
    help='Scoring functions used to select best pose')

parser.add_argument('-d',
    nargs='+',
    required=True,
    dest='prgms',
    help='Docking programs used to select best pose')

parser.add_argument('-c',
    required=False,
    dest='csvfile',
    default='poses.csv',
    help='Docking programs used to select best pose')

parser.add_argument('-l',
    required=False,
    dest='label',
    default='',
    help='Label used')

args = parser.parse_args()

dirs = []
for dir in args.dirs:
    posedir = dir + '/poses'
    if not os.path.isdir(dir):
        raise ValueError('Directory %s not found'%dir)
    elif not os.path.isdir(posedir):
        raise ValueError('Folder poses not found in %s'%dir)
    else:
        dirs.append(os.path.relpath(dir))
ndirs = len(dirs)

features = ['file_l', 'file_r', 'site', 'instance', 'program', 'index', 'directory', 'index_dir']
features_scores = ['score'] + [args.sf]
info = {}
for ft in features + features_scores:
    info[ft] = []

for jdx, dir in enumerate(dirs):
    posedir = dir + '/poses'
    # get location of poses and receptor files
    with open(posedir + '/info.dat', 'r') as inff:
        inff.next()
        inff.next()
        for line in inff:
             program, nposes, firstidx, site = line.strip().split(',')
             firstidx = int(firstidx)
             nposes = int(nposes)
             instance = program
             if site:
                 instance += '.' + site
             poses_idxs = range(firstidx, firstidx+nposes)

             for index, idx in enumerate(poses_idxs):
                 file_l = posedir + '/lig-%s.mol2'%idx
                 if os.path.isfile(file_l):
                     info['file_l'].append(os.path.relpath(file_l))
                 else:
                     raise IOError("File %s does not exist!"%file_l)
                 info['file_r'].append(os.path.relpath(posedir+'/rec.pdb'))
                 info['site'].append(site)
                 info['instance'].append(instance)
                 info['program'].append(program)
                 info['index'].append(index)
                 info['directory'].append(dir)
                 info['index_dir'].append(idx-1)

             # extract original scores
             with open(dir+'/'+instance+'/score.out', 'r') as sout:
                 for line_s in sout:
                     info['score'].append(float(line_s))

    with open(dir+'/rescoring/'+args.sf+'.score', 'r') as sout:
        for line_s in sout:
            info[args.sf].append(float(line_s))

info = pd.DataFrame(info)
suffix, ext = os.path.splitext(args.csvfile)
if args.label:
    csvfile = suffix+'_'+args.label+ext
else:
    csvfile = args.csvfile
info.to_csv(csvfile, index=False)

info_group_by = info.groupby('program')
best_poses = info.loc[info_group_by['score'].idxmin]
best_poses = best_poses[best_poses['program'].isin(args.prgms)]

# use rescoring to select best pose
best_pose = best_poses.loc[best_poses[args.sf].idxmin]

top_pose_dir = 'best_pose'
if args.label:
    top_pose_dir += '_'+args.label
shutil.rmtree(top_pose_dir, ignore_errors=True)

os.mkdir(top_pose_dir)
shutil.copyfile(best_pose['file_l'], top_pose_dir + '/ligand.mol2')
shutil.copyfile(best_pose['file_r'], top_pose_dir + '/protein.pdb')
best_pose.to_csv(top_pose_dir+'/info.dat')
