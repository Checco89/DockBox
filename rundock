#!/global/software/python-2.7.2/bin/python
from __future__ import with_statement

import sys
import os
import subprocess
import shutil
import argparse
import ConfigParser
import stat
import time

import multi
import consensus
import numpy as np

class DockingConfig(object):

    def __init__(self, args):

        # check if config file exist
        if not os.path.exists(args.config_file):
            raise ValueError("Config file %s not found!"%(args.config_file))

        config = ConfigParser.SafeConfigParser()
        config.read(args.config_file)

        self.input_file_l = os.path.abspath(args.input_file_l[0])
        # check if ligand file exists
        if not os.path.exists(self.input_file_l):
            raise IOError("File %s not found!"%(self.input_file_l))

        self.input_file_r = os.path.abspath(args.input_file_r[0])
        # check if receptor file exists
        if not os.path.exists(self.input_file_r):
            raise IOError("File %s not found!"%(self.input_file_r))

        self.docking = multi.MultiProgramDocking(config)
        self.consensus = consensus.ConsensusDocking(config, args)

        self.cleanup = self.is_yesno_option(config, 'cleanup')

    def is_yesno_option(self, config, option, default=False):

        if config.has_option('DOCKING', option):
            yesno = config.get('DOCKING', option).lower()
            if yesno == 'yes':
                return True
            elif yesno == 'no':
                return False
            else:
                raise ValueError("option %s should be yes or no!"%option)
        else:
            return default

class DockingWorker(object):

    def create_arg_parser(self):

        parser = argparse.ArgumentParser(description="Run Docking")

        parser.add_argument('-l',
            type=str,
            dest='input_file_l',
            required=True,
            nargs=1,
            help = 'Ligand coordinate file(s): .pdb, .sdf, .smi')

        parser.add_argument('-r',
            type=str,
            dest='input_file_r',
            required=True,
            nargs=1,
            help = 'Receptor coordinate file(s): .pdb')

        parser.add_argument('-f',
            dest='config_file',
            required=True,
            help='config file containing docking parameters')

        parser.add_argument('--consensus_only',
            dest='consensus_only',
            action='store_true',
            default=False,
            help='Run consensus only)')

        return parser

    def run_docking(self, config):
        """Running docking simulations using each program specified..."""

        curdir = os.getcwd()
         
        for kdx in range(len(config.docking.site)):
            bs = config.docking.site['site'+str(kdx+1)] # current binding site
            print "Binding site info -- center: %s, boxsize: %s "%(bs[1], bs[2]) 

            for instance, program, options in config.docking.instances:
                print "Starting docking with %s..."%program.capitalize()
                print "The following options will be used:"
                print options

                dockdir = instance + '.' + bs[0]
                if os.path.isdir(dockdir):
                    shutil.rmtree(dockdir)
                os.mkdir(dockdir)
                os.chdir(dockdir)

                # (A) write docking script
                script_name = "run_" + program + ".sh"
                write_docking_script = getattr(sys.modules[program], 'write_docking_script')
                write_docking_script(script_name, config.input_file_r, config.input_file_l, bs, options)
                os.chmod(script_name, stat.S_IRUSR | stat.S_IWUSR | stat.S_IRGRP | stat.S_IROTH | stat.S_IXUSR)

                # (B) execute docking procedure
                subprocess.check_call("./" + script_name + " &> " + program + ".log", shell=True, executable='/bin/bash')

                # (C) extract docking results
                extract_docking_results = getattr(sys.modules[program], 'extract_docking_results')
                extract_docking_results('rec.out.pdb', 'lig.out.pdb', 'score.out', config.input_file_r, bs, config.docking.extract)

                # (D) remove intermediate files if required
                if config.cleanup:
                    cleanup = getattr(sys.modules[program], 'cleanup')
                    cleanup(config)

                os.chdir(curdir)
                print "Docking with %s done."%program.capitalize()

    def run(self):

        parser = self.create_arg_parser()
        args = parser.parse_args()    

        tcpu1 = time.time()

        print "Setting up parameters..."
        config = DockingConfig(args)

        # run docking
        if not config.consensus.only:
            self.run_docking(config)

        config.consensus.find_consensus(config.docking.instances, config.docking.site)

        tcpu2 = time.time()
        print "Docking procedure done. Total time needed: %i s" %(tcpu2-tcpu1)


if __name__ == '__main__':
    DockingWorker().run()
